// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key, value)
}

// GetUpdating mocks base method.
func (m *MockCache) GetUpdating(ctx context.Context, key string, value interface{}, d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdating", ctx, key, value, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUpdating indicates an expected call of GetUpdating.
func (mr *MockCacheMockRecorder) GetUpdating(ctx, key, value, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdating", reflect.TypeOf((*MockCache)(nil).GetUpdating), ctx, key, value, d)
}

// IsErrCacheMissing mocks base method.
func (m *MockCache) IsErrCacheMissing(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrCacheMissing", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrCacheMissing indicates an expected call of IsErrCacheMissing.
func (mr *MockCacheMockRecorder) IsErrCacheMissing(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrCacheMissing", reflect.TypeOf((*MockCache)(nil).IsErrCacheMissing), err)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, value interface{}, d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, d)
}
