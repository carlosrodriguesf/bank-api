// Code generated by MockGen. DO NOT EDIT.
// Source: secret.go

// Package secret is a generated GoMock package.
package secret

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecret is a mock of Secret interface.
type MockSecret struct {
	ctrl     *gomock.Controller
	recorder *MockSecretMockRecorder
}

// MockSecretMockRecorder is the mock recorder for MockSecret.
type MockSecretMockRecorder struct {
	mock *MockSecret
}

// NewMockSecret creates a new mock instance.
func NewMockSecret(ctrl *gomock.Controller) *MockSecret {
	mock := &MockSecret{ctrl: ctrl}
	mock.recorder = &MockSecretMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecret) EXPECT() *MockSecretMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockSecret) Encode(password, salt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", password, salt)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockSecretMockRecorder) Encode(password, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockSecret)(nil).Encode), password, salt)
}

// GenSalt mocks base method.
func (m *MockSecret) GenSalt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenSalt")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenSalt indicates an expected call of GenSalt.
func (mr *MockSecretMockRecorder) GenSalt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenSalt", reflect.TypeOf((*MockSecret)(nil).GenSalt))
}

// Verify mocks base method.
func (m *MockSecret) Verify(decoded, encoded, salt string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", decoded, encoded, salt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSecretMockRecorder) Verify(decoded, encoded, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSecret)(nil).Verify), decoded, encoded, salt)
}
