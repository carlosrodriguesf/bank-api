// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	reflect "reflect"

	model "github.com/carlosrodriguesf/bank-api/pkg/model"
	transaction "github.com/carlosrodriguesf/bank-api/pkg/tool/transaction"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, account model.Account) (*model.GeneratedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(*model.GeneratedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, account)
}

// GetByIDOrDocument mocks base method.
func (m *MockRepository) GetByIDOrDocument(ctx context.Context, v string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDOrDocument", ctx, v)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDOrDocument indicates an expected call of GetByIDOrDocument.
func (mr *MockRepositoryMockRecorder) GetByIDOrDocument(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDOrDocument", reflect.TypeOf((*MockRepository)(nil).GetByIDOrDocument), ctx, v)
}

// HasDocument mocks base method.
func (m *MockRepository) HasDocument(ctx context.Context, document string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDocument", ctx, document)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDocument indicates an expected call of HasDocument.
func (mr *MockRepositoryMockRecorder) HasDocument(ctx, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDocument", reflect.TypeOf((*MockRepository)(nil).HasDocument), ctx, document)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx)
}

// UpdateBalance mocks base method.
func (m *MockRepository) UpdateBalance(ctx context.Context, accountID string, balance int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, accountID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockRepositoryMockRecorder) UpdateBalance(ctx, accountID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockRepository)(nil).UpdateBalance), ctx, accountID, balance)
}

// WithTransaction mocks base method.
func (m *MockRepository) WithTransaction(conn transaction.Transaction) Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", conn)
	ret0, _ := ret[0].(Repository)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryMockRecorder) WithTransaction(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepository)(nil).WithTransaction), conn)
}
